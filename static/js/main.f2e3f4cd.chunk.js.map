{"version":3,"sources":["logo.svg","BlueBin.js","GarbageBin.js","UpdateList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BlueBin","handleClickForBlueBin","e","preventDefault","_this","props","onhandleBlueBinClicked","target","onClick","react_default","a","createElement","Fragment","this","Component","GarbageBin","handleClickForGarbageBin","onhandleGarbageBinClicked","UpdateList","handleClickForItems","index","event","mass","ButtonGarbageBin","swal","className","garbageCategoriesGarbage","title","category","keywords","garbageCategoriesBlueBin","_this2","temp","ButtonblueBin","map","i","key","tabIndex","bind","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","categorySorter","fullArray","sortType","regexTruthygarbageTypeBlueBin","regexTruthygarbageTypeGarbage","regexCutBlueBin","regexCutGarbage","updatedCategoryArray","item","exec","replace","push","handleBlueBinClicked","click1","setState","blueBinClicked","handleGarbageBinClicked","click2","garbageBinClicked","state","isLoading","UserInputString","garbageCategoriesAll","garbageListToShow","axios","url","method","headers","UserAgent","Accept","CacheControl","PostmanToken","acceptencoding","cachecontrol","then","response","data","catch","error","src","logo","alt","src_BlueBin","src_GarbageBin","src_UpdateList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2e3f4cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.27d3a59d.svg\";","import React, { Component } from 'react';\n\n// This is my component for blue bin button\nclass BlueBin extends Component {\n\n    // event handler for the button click\n    handleClickForBlueBin = (e) => {\n        e.preventDefault();\n        this.props.onhandleBlueBinClicked(e.target.onClick);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {\n                    <button onClick={this.handleClickForBlueBin}>BlueBin</button>\n                }\n            </React.Fragment>\n        )//Close Render\n    }//close Render\n}//Close Class Bluebin\n\n//Export BlueBin\nexport default BlueBin;","import React, { Component } from 'react';\n// This is my component for the GarbageBin Button\nclass GarbageBin extends Component {\n\n    // The event handler for Garbage bin\n    handleClickForGarbageBin = (e) => {\n        e.preventDefault();\n        this.props.onhandleGarbageBinClicked(e.target.onClick);\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {\n                    <button onClick={this.handleClickForGarbageBin}>Garbage</button>\n                }\n            </React.Fragment>\n        )//Close Return\n    }//Close Render\n}//Class of GarbageBin\n\n//Exporting GarbageBin\nexport default GarbageBin;","import React, { Component } from 'react';\r\nimport swal from '@sweetalert/with-react'\r\n\r\n//Class for my list that is required to be updated every time I need to\r\nclass UpdateList extends Component {\r\n    //event handler for my list items that can be clicked on\r\n    handleClickForItems = (index, event) => {\r\n        event.preventDefault();\r\n\r\n        if (this.props.mass.ButtonGarbageBin) {\r\n            swal(\r\n                <div className='sweet'>\r\n                    <p className='sweetTitle'>{this.props.mass.garbageCategoriesGarbage[index].title}</p>\r\n                    <p className='sweetCategory'>\r\n                        {this.props.mass.garbageCategoriesGarbage[index].category}\r\n                    </p>\r\n                    <p className='sweetKey'>\r\n                        {this.props.mass.garbageCategoriesGarbage[index].keywords}\r\n                    </p>\r\n                </div>\r\n            )\r\n        } else {\r\n            swal(\r\n                <div className='sweet'>\r\n                    <p className='sweetTitle'>{this.props.mass.garbageCategoriesBlueBin[index].title}</p>\r\n                    <p className='sweetCategory'>\r\n                        {this.props.mass.garbageCategoriesBlueBin[index].category}\r\n                    </p>\r\n                    <p className='sweetKey'>\r\n                        {this.props.mass.garbageCategoriesBlueBin[index].keywords}\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        let temp = [];\r\n        if (this.props.mass.ButtonblueBin === true) {\r\n            temp = this.props.mass.garbageCategoriesBlueBin;\r\n        } else if (this.props.mass.ButtonGarbageBin === true) {\r\n            temp = this.props.mass.garbageCategoriesGarbage;\r\n        }\r\n        return (\r\n            <ul>\r\n                {\r\n                    temp.map((category, i) => {\r\n                        return (\r\n                            <button key={i} tabIndex='0' onClick={this.handleClickForItems.bind(this, i)}>{category.title}</button>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )//Close Return\r\n    }//Close Render\r\n}//Class of GarbageBin\r\n\r\n//Exporting GarbageBin\r\nexport default UpdateList;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport BlueBin from './BlueBin.js';\nimport GarbageBin from './GarbageBin.js';\nimport UpdateList from './UpdateList.js';\nimport axios from 'axios';\nimport swal from '@sweetalert/with-react'\nimport './App.css';\n\nclass App extends Component {\n  //Construcor which is kind of what it does??\n  constructor() {\n    super();\n\n    //the many states I used\n    this.state = {\n      isLoading: true,\n      ButtonblueBin: false,\n      ButtonGarbageBin: false,\n      UserInputString: '',\n      garbageCategoriesAll: [],\n      garbageCategoriesBlueBin: [],\n      garbageCategoriesGarbage: [],\n      garbageListToShow: [],\n    }\n  }\n\n  //I need to sort through my array of categories to find all the items that either have a blue Bin or garbage\n  categorySorter = (fullArray, sortType) => {\n    const regexTruthygarbageTypeBlueBin = /blue.bin/gi;\n    const regexTruthygarbageTypeGarbage = /garbage/gi;\n    const regexCutBlueBin = /blue.bin|\\(|\\)/gi;\n    const regexCutGarbage = /garbage|\\(|\\)/gi;\n    const updatedCategoryArray = [];\n\n    //the function I created to kind of filter through my array\n    fullArray.map((item, i) => {\n      if (sortType === 'blueBin') {\n        if (regexTruthygarbageTypeBlueBin.exec(item.category)) {\n          item.title = item.title.replace(regexCutBlueBin, '');\n          updatedCategoryArray.push(item);\n        }\n      }\n      if (sortType === 'garbage') {\n        if (regexTruthygarbageTypeGarbage.exec(item.category)) {\n          item.title = item.title.replace(regexCutGarbage, '');\n          updatedCategoryArray.push(item);\n        }\n      }\n      return (\n        updatedCategoryArray\n      )\n    })\n    return (updatedCategoryArray)\n  }\n\n  //updates the required states when it is called\n  handleBlueBinClicked = (click1) => {\n    this.setState({\n      ButtonblueBin: true,\n      ButtonGarbageBin: false,\n      blueBinClicked: click1\n    });\n  }\n  //updates the required states when it is called\n  handleGarbageBinClicked = (click2) => {\n    this.setState({\n      ButtonblueBin: false,\n      ButtonGarbageBin: true,\n      garbageBinClicked: click2\n    })\n  }\n\n  //This is where I should put my axios call\n  componentDidMount() {\n    //created Axios request\n    axios({\n      //The API has no other way of sending exact data. I need to call the whole database.\n      url: 'https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=250',\n      method: 'GET',\n      headers: {\n        UserAgent: \"PostmanRuntime/7.13.0\",\n        Accept: \"*/*\",\n        CacheControl: \"no-cache\",\n        PostmanToken: \"3855ce5c-03a7-46ba-89df-cee728c768ba,341124e0-2a2b-47e3-bd63-b44d7ce86e3b\",\n        acceptencoding: \"gzip, deflate\",\n        cachecontrol: \"no-cache\"\n      }\n    })\n    .then((response) => {\n      response = response.data;\n      this.setState({\n        garbageCategoriesAll: response,\n        garbageCategoriesBlueBin: this.categorySorter(response, \"blueBin\"),\n        garbageCategoriesGarbage: this.categorySorter(response, \"garbage\"),\n        isLoading: false,\n      })\n    })\n    .catch(function(error){\n      swal(\n        <div className='sweet'>\n          <p className='sweetTitle'>Please Refresh the Page</p>\n        </div>\n      )\n    })\n  }\n  //refresh when setState is called\n  render() {\n    return (\n      <div className='App'>\n        \n        {this.state.isLoading ? (\n          //if this loading statement is false, info goes here\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n        ) : (\n\n          //the main bulk of the program under here\n            <div className='body wrapper'>\n              <header className=''>\n                <div className=\"mainTitle\">\n                  <h2>REDUCE</h2>\n                  <h2>REUSE</h2>\n                  <h1>RECYCLE</h1>\n                </div>\n\n                <div className='underlay'>\n                  <div className='quoteBox1'>\n                    <blockquote>\n                      <h3>The Earth is a fine place and worth fighting for.</h3>\n                      <h4>-Ernest Hemingway</h4>\n                    </blockquote>\n                  </div>\n                  <div className='quoteBox2'>\n                    <blockquote>\n                      <h3>The greatest threat to our planet is the belief that someone else will save it.</h3>\n                      <h4>-Robert Swan</h4>\n                    </blockquote>\n                  </div>\n                </div>\n              </header>\n              <div className='categorySelector'>\n                {/* calls the blueBin button */}\n                {\n                  <BlueBin className = 'blueButton'\n                    mass={this.state}\n                    onhandleBlueBinClicked={this.handleBlueBinClicked}\n                  />\n                }\n                {/* calls the Garbage button */}\n                {\n                  <GarbageBin className='garbageButton'\n                    mass={this.state}\n                    onhandleGarbageBinClicked={this.handleGarbageBinClicked}\n                  />\n                }\n              </div>\n\n              <div>\n                {/* calls the Updated list */}\n                <UpdateList\n                  mass={this.state} />\n              </div>\n            </div>\n          )\n        }\n      </div>\n    ); //bracket for return\n  } //Bracket for render\n}//bracket for class App\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}